#!/usr/bin/env sh

set -eu

if [ -n "${SWAGGER_CMD+1}" ]
then
    echo "Using Swagger command \`${SWAGGER_CMD}\`."
else
    if ! which swagger-codegen
    then
        echo "swagger-codegen is either not installed on this system or is"\
            "unavailable through the \$PATH."
        while true; do
            printf "Install it from Homebrew now? [y/N] "
            read -r  yn
            case "$yn" in
                [Yy]* ) break;;
                [Nn]* ) exit;;
                '' ) exit;;
            esac
        done

        echo "Updating Homebrew and then installing swagger-codegen"
        brew update
        brew install swagger-codegen
    fi

    SWAGGER_CMD="swagger-codegen"
fi

target_language="${1:-}"

generate_for_language() {

    INPUT_SPEC='uncertain'

    # Check whether we've been asked to generate TypeScript code.
    # We do so by trying to strip the string 'typescript' from the first parameter.
    if [ "${1#typescript}" = "${1}" ]
    then
        # That parameter doesn't change when we try to remove the 'typescript'
        # substring. It's not TypeScript.
        INPUT_SPEC='./api.json'
    else
        # That attempt to remove a substring was successful. We will be generating
        # some form of TypeScript code.
        #
        # In TypeScript, Error is a reserved word.
        #
        # For that reason, we transform instances of the type 'Error' in api.json to
        # 'SquareError'. Corresponding anchor references ('#type-error') are also
        # converted.
        #
        # The commands below have been tested with
        # GNU sed 4.4
        # and
        # Bash 4.4.x
        #
        sed -E 's/\bError\b/SquareError/g' < './api.json'  | sed -E 's/\btype-error\)\b/type-squareerror\)/g' > './ts-api.json'
        INPUT_SPEC='./ts-api.json'
    fi

    $SWAGGER_CMD generate \
        --input-spec "$INPUT_SPEC" \
        --generator-name "$1" \
        --config "./swagger-config/config-$1.json" \
        --template-dir "./swagger-templates/$1" \
        --output "./swagger-out/$1"
}

if [ -n "$target_language" ]
then
    generate_for_language "$target_language"
else
    languages=$(ls swagger-templates)

    for lang in $languages
    do
        generate_for_language "$lang"
    done
fi

